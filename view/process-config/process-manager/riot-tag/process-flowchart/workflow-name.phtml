<div class="row">
    <div class="col-md-8 col-lg-offset-2">
        <p class="text-center text-btn-align" if="{ ! isEditingWorkflowName }"><strong>{ workflow_name.value }</strong></p>
        <input name="workflow_name" if="{ isEditingWorkflowName }" type="text" class="form-control" placeholder="<?php echo $this->translate('Enter Workflow Name')?>" onchange="{ onWorkflowNameChanged }" >
        <p></p>
    </div>
    <div class="col-md-2">
        <button class="btn btn-default" onclick="{ editWorkflowName }" if="{ ! isEditingWorkflowName }"><?php echo $this->translate('change')?></button>
        <button class="btn btn-default" onclick="{ saveWorkflowName }" if="{ isEditingWorkflowName }"><?php echo $this->translate('save')?></button>
    </div>
</div>
<script type="text/javascript">
    function (context) {
        var self = this,
        _workflowLocation = null;

        this.isEditingWorkflowName = false;

        this.parent.one("willCreateNewWorkflow", function () {
            self.isEditingWorkflowName = true;
            self.update();
        })

        this.parent.on("WorkflowWasInitialized", function (event) {
            _workflowLocation = event.workflow.location;
            if (event.workflow.name !== "Undefined")
                self.workflow_name.value = event.workflow.name;
            else
                self.isEditingWorkflowName = true;
        });

        this.parent.on("workflowWasReloaded", function (event) {
            _workflowLocation = event.workflow.location;
            if (event.workflow.name !== "Undefined")
                self.workflow_name.value = event.workflow.name;
            else
                self.isEditingWorkflowName = true;
        });

        /**
         * Enable workflow name editing mode
         */
        this.editWorkflowName = function () {
            this.isEditingWorkflowName = true;
        }

        /**
         * Save workflow name to server
         *
         * @triggers workflowNameWasChanged
         */
        this.saveWorkflowName = function () {
            if (_.isEmpty(self.workflow_name.value)) return;

            self.isEditingWorkflowName = false;

            if (_.isEmpty(_workflowLocation)) $.appErrorNotify('[workflow-name]: Saving workflow name is not possible due to missing workflow.location');

            $.putJSON(_workflowLocation, {name : self.workflow_name.value}).then(
                function () {
                    self.trigger("workflowNameWasChanged", {new_name : self.workflow_name.value })
                },
                $.failNotify
            );
        }

        /**
         * Event handler for workflow_name changed event
         */
        this.onWorkflowNameChanged = function () {
            if (_.isEmpty(self.workflow_name.value)) {
                this.isEditingWorkflowName = true;
            } else {
                self.saveWorkflowName();
            }
        }
    }
</script>