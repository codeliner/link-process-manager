<workflow-name></workflow-name>
<whiteboard></whiteboard>
<div id="metadata-modal" class="modal fade">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 id="metadata-modal-title" class="modal-title">Metadata</h4>
            </div>
            <div id="metadata-modal-body" class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-abort" data-dismiss="modal"><?php echo $this->translate('Close') ?></button>
                <button type="button" class="btn btn-primary btn-save"><?php echo $this->translate('Save changes') ?></button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<div id="processing-type-modal" class="modal fade">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title"><?php echo $this->translate('Choose Data Type')?></h4>
            </div>
            <div id="processing-type-modal-body" class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-save" data-dismiss="modal"><?php echo $this->translate('Ok') ?></button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<script type="text/javascript">
    function (context) {
        var self = this,
            _workflow = {},
            _flowchartConfig = {},
            _flowchartIsLoaded = false,

        //Initializers

        /**
         * Initialize workflow entity on riot tag mount
         *
         * @triggers WorkflowWasInitialized {workflow}
         */
        _initWorkflow = function () {
            if (context.isNew) {
                self.trigger("willCreateNewWorkflow");

                $.postJSON('<?php echo $this->url('prooph.link/process_config/api/workflow')  ?>',
                    {"name" : "Undefined"}
                ).then(
                    function(data, textStatus, request) {
                        _workflow['location'] = request.getResponseHeader('location');
                        _reloadWorkflow();
                        self.one("workflowWasReloaded", _createFlowchartConfig);
                        self.one("flowchartConfigWasCreated", function () {
                            if (window.location.hash == "#workflows/create") {
                                context.app.router.stop();
                                window.location.hash = "workflows/" + _workflow.id + "/show";
                                window.setTimeout(function() {context.app.router.restart()}, 5);
                            }

                            self.trigger("WorkflowWasInitialized", {workflow : _workflow});
                        });
                    },
                    $.failNotify
                );
            } else {
                _workflow = _.findWhere(context.app.workflows, {id : context.workflowId});
                _workflow['location'] = '<?php echo $this->url('prooph.link/process_config/api/workflow')  ?>/' + context.workflowId;
                self.trigger("WorkflowWasInitialized", {workflow : _workflow});
                _loadFlowchartConfig();
            }
        },

        //Workflow operations

        /**
         * Load workflow from server and replace workflow entity with fetched data
         *
         * @triggers workflowWasReloaded {workflow}
         */
         _reloadWorkflow = function () {
            $.getJSON(_workflow.location).then(
                function(data) {
                    var workflowData = data.workflow;
                    workflowData['location'] = _workflow.location;
                    _workflow = workflowData;
                    self.trigger("workflowWasReloaded", {workflow : _workflow});
                },
                $.failNotify
            );
        },


        /**
         * Command handler for the app.publishWorkflow command
         *
         * Creates a release for the workflow on the server
         *
         * @triggers workflowWasPublished {workflow}
         */
        _publishWorkflow = function () {
            $.postJSON(
                '<?php echo $this->url('prooph.link/process_config/api/workflow_release')  ?>',
                {
                    workflow_id : _workflow.id
                }
            ).then(function (data, textStatus, jqXhr) {
                context.app.trigger("workflowWasPublished", {workflow: _workflow});
            }, $.failNotify);
        },

        //Flowchart operations

        /**
         * This method creates a flowchart configuration for a new workflow on the server
         * It is triggered once after a new workflow was created on the server and the workflow
         * was successfully reloaded.
         *
         * @triggers flowchartConfigWasCreated {connections, elements}
         */
        _createFlowchartConfig = function () {
            _flowchartConfig = { elements : []};
            self.trigger("willCreateFlowchartConfig", {config : _flowchartConfig});

            $.postJSON(
                '<?php echo $this->url('prooph.link/process_config/api/flowchart')  ?>',
                {
                    workflow_id : _workflow.id,
                    config : _flowchartConfig
                }
            ).then(
                function (data, textStatus, request) {
                    $.getJSON(request.getResponseHeader('location')).then(
                        function (data) {
                            self.trigger("flowchartConfigWasCreated", _flowchartConfig);
                        },
                        $.failNotify
                    );

                    _flowchartIsLoaded = true;
                },
                $.failNotify
            );
        },

        /**
         * Collect current elements and connections
         * and store it all together in a flowchart config on the server
         *
         * @triggers willUpdateFlowchartConfig {connections, elements}
         */
        _updateFlowchartConfig = function () {

            self.trigger("willUpdateFlowchartConfig", { config : _flowchartConfig});

            $.putJSON('<?php echo $this->url('prooph.link/process_config/api/flowchart') ?>/' + _workflow.id, {
                'workflow_id' : _workflow.id,
                'config' : _flowchartConfig
            });
        },

        /**
         * Load flowchart config from server
         */
        _loadFlowchartConfig = function () {
            $.getJSON('<?php echo $this->url('prooph.link/process_config/api/flowchart') ?>/' + _workflow.id).then(
                function (data) {

                    _flowchartConfig = data.flowchart.config;
                    self.tags.whiteboard.reconstituteWhiteboard(_flowchartConfig);
                    self.trigger("flowchartConfigWasLoaded", {config : _flowchartConfig});
                },
                $.failNotify
            );
        },

        //Whiteboard interaction

        /**
         * Handles whiteboard elementWasClicked events and opens the task metadata modal
         *
         * @param event object
         */
        _onWhiteboardElementWasClicked = function (event) {
            var handlerData = _.findWhere(_flowchartConfig.elements, {id : event.element_id});

            if (!_.isEmpty(handlerData.tasks)) {
                _.each(handlerData.tasks, function (taskData) {
                    if (taskData.type !== '<?php echo \Prooph\Link\ProcessManager\Model\Task\TaskType::TYPE_RUN_SUB_PROCESS  ?>') {
                        _requestTaskMetadataForMessageHandlerFromModule(handlerData, taskData)
                            .then(function (taskMetadata) {
                                var metadata = (!_.isEmpty(handlerData.processing_metadata))? handlerData.processing_metadata : {};
                                _.merge(metadata, taskMetadata);

                                taskData.metadata = metadata;

                                return Q($.putJSON('<?php echo $this->url('prooph.link/process_config/api/task')  ?>/' + taskData.id, {
                                    metadata : taskData.metadata
                                })).catch(function (xhr) {
                                    $.failNotify(xhr);
                                    throw new Error("Failed to save task metadata");
                                });
                            }).done(function () {
                                _updateFlowchartConfig();
                            });
                    }
                });
            }
        },

        /**
         * Listens on whiteboard elementWasDropped events to create an appropriate data type of the element
         * and trigger the drawing of the element on the whiteboard
         *
         * @param event elementWasDropped
         */
        _onWhiteboardElementWasDropped = function (event) {
            switch (event.element_type) {
                case "connector":
                    self.tags.whiteboard.whiteboardPause();
                    /**
                     * We use the promise lib Q to build a function chain which includes ajax calls.
                     * The chain starts by trying to create a message handler for given processingId.
                     * If we can't find a corresponding processing message handler,
                     * we ask the message handler module (via a dedicated riot tag)
                     * to provide required configuration to create a new message handler on the server.
                     * In the last step we hopefully have valid message handler information to create a connector
                     * element on the whiteboard based on the handler data.
                     * If we can't create a connector, the element drop is rejected and the user gets notified about it.
                     */
                    Q.fcall(function () {
                        //Maybe we already have a processing message handler
                        //that can be converted to a process manager message handler
                        var processingHandler = _.findWhere(context.app.connectors, {id : event.processing_id});

                        if (processingHandler) {
                            return _translateProcessingHandlerToProcessManagerHandler(processingHandler, event.element_type);
                        }

                        //Ok, we definitely need to ask the handler module to provide us with valid handler data
                        return _requestHandlerDataFromModule(
                            event.ui_metadata_riot_tag,
                            event.element_name,
                            event.processing_id
                        );
                    })
                    .then(function (handlerData) {
                        return _createMessageHandler(handlerData);
                    })
                    .then(function (handlerData) {
                        self.tags.whiteboard.addConnector(event.pos_x, event.pos_y, handlerData);
                        _flowchartConfig.elements.push(handlerData);
                        _updateFlowchartConfig();
                    })
                    .catch(function (reason) {
                        $.appErrorNotify(reason);
                    })
                    .finally(function () {
                        self.tags.whiteboard.whiteboardContinue();
                    })
                    .done();
                    break;
                default:
                    throw new Error(s.sprintf('<?php echo $this->translate('Unknown element type dropped. Got %s')  ?>', event.element_type));
            }
        },

        /**
         * Listens on whiteboard connectionWasApplied event to create a new task for the connected target message handler
         *
         * @param event connectionWasApplied
         */
        _onWhiteboardConnectionWasApplied = function (event) {

            var targetId = event.target_element_id,
                handlerData = _.findWhere(_flowchartConfig.elements, {id : targetId});

            Q.fcall(function () {
                if (event.is_start_connection) {
                    //Create start connection
                    return Q.fcall(function () {
                        if (! _.isEmpty(handlerData.preferred_type)) {
                            return handlerData.preferred_type;
                        } else if (!_.isEmpty(handlerData.processing_types)) {
                            if (handlerData.processing_types.length == 1) {
                                return handlerData.processing_types[0];
                            } else {
                                var deferred = Q.defer();

                                _chooseProcessingTypeViaModal(handlerData, deferred);

                                return deferred.promise;
                            }
                        } else {
                            throw new Error("Failed to detect the processing type to collect.");
                        }
                    }).then(function (processingType) {
                        return Q($.postJSON('<?php echo $this->url('prooph.link/process_config/api/connection')  ?>', {
                            'type' : 'start_connection',
                            'workflow_id' : _workflow.id,
                            'start_message' : {
                                'message_type' : '<?php echo \Prooph\Link\ProcessManager\Model\Workflow\MessageType::TYPE_COLLECT_DATA  ?>',
                                'processing_type' : processingType
                            },
                            'message_handler' : targetId
                        })).catch(function (jqXhr) {
                            $.failNotify(jqXhr);
                            throw new Error("Failed to create connection");
                        })
                    })
                } else {

                    var prevHandlerData = _.findWhere(_flowchartConfig.elements, {id : event.source_element_id});

                    if (_.isUndefined(prevHandlerData.tasks) || _.isEmpty(prevHandlerData.tasks)) {
                        throw new Error("<?php echo $this->translate('Can\'t establish a connection, because the source has no connection to the workflow!')  ?>");
                    }

                    var prevTask = _.last(prevHandlerData.tasks);

                    return Q($.postJSON('<?php echo $this->url('prooph.link/process_config/api/connection')  ?>', {
                        'type' : 'source_target_connection',
                        'workflow_id' : _workflow.id,
                        'previous_task' : prevTask.id,
                        'message_handler' : targetId
                    })).catch(function (jqXhr) {
                        $.failNotify(jqXhr);
                        throw new Error("<?php echo $this->translate('Failed to create connection on the server.')  ?>");
                    })
                }
            }).then(function () {
                //Load tasks for target message handler
                return Q($.getJSON('<?php echo $this->url('prooph.link/process_config/api/task') ?>?message_handler_id='+encodeURIComponent(targetId))).then(function (response) {
                    return response.task_collection;
                }, function (jqXhr) {
                    $.failNotify(jqXhr);
                    throw new Error("<?php echo $this->translate('Failed to load tasks for message handler from server.')  ?>");
                });
            }).then(function(taskCollection) {
                //Assign tasks to the target message handler
                handlerData.tasks = taskCollection;
            }).then(function () {
                self.tags.whiteboard.setConnectionStatusSuccess(event.source_element_id, event.target_element_id);
            }, function (reason) {
                $.appErrorNotify(reason);
                self.tags.whiteboard.setConnectionStatusError(event.source_element_id, event.target_element_id);
            }).done(function () {
                _updateFlowchartConfig();
            });
        },

        //Message handler operations

        /**
         * Send given handlerData to the server to create a new message handler and return promise which resolves to
         * the handler data stored on the server.
         */
        _createMessageHandler = function (handlerData) {
            return Q($.postJSON(
                '<?php echo $this->url('prooph.link/process_config/api/message_handler') ?>',
                handlerData
            ).then(
                function (data, textStatus, request) {
                    return $.getJSON(request.getResponseHeader("location")).then(function(data) {
                        return data.message_handler;
                    }, function (request) {
                        $.failNotify(request);
                        return new Error("Failed to load message handler");
                    });
                },
                function(request) {
                    $.failNotify(request);
                    return new Error("Failed to create message handler on server");
                }
            ));
        },

        /**
         * @var processingId string
         *
         * @return Q.promise
         */
        _loadMessageHandlersByProcessingId = function (processingId) {
            if (processingId) {
                return Q($.getJSON('<?php echo $this->url('prooph.link/process_config/api/message_handler') ?>?processing_id='+encodeURIComponent(processingId)));
            } else {
                return Q.fcall(function () {
                    return {
                        "message_handler_collection" : []
                    }
                });
            }
        },

        /**
         * This method interacts with the given riot tag to request message handler data from it.
         * The riot tag is loaded into a modal and when the user has entered all data, the riot tag should
         * pass the data back via a promise so that the method can use the data to create new message handler on the server.
         */
        _requestHandlerDataFromModule = function(uiMetadataRiotTag, handlerName, processingId) {

            var handlerDeferred = Q.defer();
            $("#metadata-modal-title").html(handlerName + " <?php echo $this->translate('Settings')  ?>");
            context.app.renderInto(self, '#metadata-modal-body', uiMetadataRiotTag, {
                handlerData: {is_new : true, processing_id : processingId},
                handlerDeferred: handlerDeferred,
                $modal: $("#metadata-modal")
            });

            $("#metadata-modal").modal();

            return handlerDeferred.promise;
        },

        /**
         * This method interacts with the given riot tag to request task metadata for the responsible message handler from it.
         * The riot tag is loaded into a modal and when the user has entered all data, the riot tag should
         * pass the data back via a promise so that the method can assign the new metadata to the related task and save it on the server.
         */
        _requestTaskMetadataForMessageHandlerFromModule = function(handlerData, taskData) {
            if (_.isEmpty(taskData.metadata)) {
                taskData.metadata = {};
            }

            var handlerDeferred = Q.defer(),
                $modal = $("#metadata-modal");

            $("#metadata-modal-title").html(handlerData.name + " <?php echo $this->translate('Settings')  ?>");

            context.app.renderInto(self, '#metadata-modal-body', handlerData.metadata_riot_tag, {
                handlerData: {
                    is_new : false,
                    processing_id : handlerData.processing_id,
                    task_metadata : _.cloneDeep(taskData.metadata),
                    task_type : taskData.type,
                    task_processing_type : taskData.processing_type
                },
                handlerDeferred: handlerDeferred,
                $modal: $modal
            });

            $modal.modal();

            return handlerDeferred.promise.finally(function () {
                //cleanup event handlers
                $("#metadata-modal").unbind("hide.bs.modal").find(".btn-save").unbind();
            });
        },

        /**
         * The method takes a processing handler and translates it to data that can be handled by the process manager backend.
         */
        _translateProcessingHandlerToProcessManagerHandler = function (processingHandler, type) {
            var handlerData = {type : type};

            processingHandler = _.cloneDeep(processingHandler);

            handlerData.name = processingHandler.name;
            delete processingHandler.name;
            handlerData.node_name = processingHandler.node_name;
            delete processingHandler.node_name;
            handlerData.processing_types = processingHandler.allowed_types;
            delete processingHandler.allowed_types;
            handlerData.processing_id = processingHandler.id;
            delete processingHandler.id;
            handlerData.metadata_riot_tag = processingHandler.ui_metadata_riot_tag;
            delete processingHandler.ui_metadata_riot_tag;
            handlerData.icon = processingHandler.icon;
            delete processingHandler.icon;
            handlerData.icon_type = processingHandler.icon_type;
            delete processingHandler.icon_type;

            if (!_.isEmpty(processingHandler.metadata)) {
                handlerData.processing_metadata = processingHandler.metadata;
            }
            delete processingHandler.metadata;

            if(!_.isEmpty(processingHandler.preferred_type)) {
                handlerData.preferred_type = processingHandler.preferred_type;
            }
            delete processingHandler.preferred_type;

            if (processingHandler.allowed_messages.length == 2) {
                handlerData.data_direction = '<?php echo \Prooph\Link\ProcessManager\Model\MessageHandler\DataDirection::DIRECTION_SOURCE_AND_TARGET  ?>';
            }else if(processingHandler.allowed_messages[0] == '<?php echo \Prooph\Link\ProcessManager\Model\Workflow\MessageType::TYPE_COLLECT_DATA  ?>') {
                handlerData.data_direction = '<?php echo \Prooph\Link\ProcessManager\Model\MessageHandler\DataDirection::DIRECTION_SOURCE  ?>';
            }else if(processingHandler.allowed_messages[0] == '<?php echo \Prooph\Link\ProcessManager\Model\Workflow\MessageType::TYPE_PROCESS_DATA  ?>') {
                handlerData.data_direction = '<?php echo \Prooph\Link\ProcessManager\Model\MessageHandler\DataDirection::DIRECTION_TARGET  ?>';
            } else {
                return new Error("Unknown message type: " + processingHandler.allowed_messages[0]);
            }
            delete processingHandler.allowed_messages;

            handlerData.additional_data = processingHandler;

            return handlerData;
        },

        _chooseProcessingTypeViaModal = function (handlerData, deferred) {
            var $modal = $("#processing-type-modal"),
                $modalBody = $("#processing-type-modal-body"),
                processingTypes = handlerData.processing_types,
                selectedProcessingType = handlerData.processing_types[0],
                _getSelectedProcessingType = function () {
                    var selectedProcessingType = null;
                    $modalBody.find('.modal_processing_type').each(function (i, radio) {
                        if ($(radio).prop("checked")) {
                            selectedProcessingType = $(radio).val();
                        }
                    })

                    if (_.isEmpty(selectedProcessingType)) {
                        selectedProcessingType = handlerData.processing_types[0];
                    }

                    return selectedProcessingType;
                };

            //Reset current modal session
            $modalBody.html("");
            $modal.off("hide.bs.modal");

            window.setTimeout(function () {
                $modal.on("hide.bs.modal", function () {
                    if (!deferred.promise.isFulfilled()) {
                        deferred.resolve(_getSelectedProcessingType());
                    }
                })
            }, 100);

            _.each(processingTypes, function(processingType) {
                var processingTypeObj = _.findWhere(context.app.processingTypes, {value : processingType});

                if (!_.isUndefined(processingTypeObj)) {
                    $modalBody.append(
                        $("<div />").addClass("radio").append(
                            $("<label />").append(
                                $("<input />").attr({
                                    type : "radio",
                                    name : "modal_processing_type",
                                    value : processingTypeObj.value
                                }).addClass("modal_processing_type")
                                .prop({
                                    checked : selectedProcessingType === processingTypeObj.value
                                })
                            ).append(processingTypeObj.label)
                        )
                    );
                }
            });

            $modal.modal();
        },

        _showProcessLog = function (event) {
            var log = event.log,
                prevTask = null;

            _.each(log.tasks, function (task) {
                console.log("task", task);

                var target = _.isUndefined(task.source)? task.target : task.source;
                var source = null;

                if (!_.isNull(prevTask)) {
                    source = _.isUndefined(prevTask.source)? prevTask.target : prevTask.source;
                }

                console.log("source", source);
                console.log("target", target);

                if (!_.isNull(source))
                    source = _.findWhere(_flowchartConfig.elements, {processing_id : source}).id;

                if (!_.isNull(target))
                    target = _.findWhere(_flowchartConfig.elements, {processing_id : target}).id;


                console.log("sourceElementId", source);
                console.log("targetElementId", target);

                self.tags.whiteboard.setConnectionStatusUnknown(source, target);

                var lastEvent = _.last(task.events);

                console.log(lastEvent);

                if (lastEvent.name === 'TaskEntryMarkedAsDone') {
                    self.tags.whiteboard.setConnectionStatusSuccess(source, target);
                } else if (lastEvent.name === 'TaskEntryMarkedAsFailed') {
                    self.tags.whiteboard.setConnectionStatusError(source, target);
                }

                var title = null;
                var text = "";

                _.each(task.events, function (event) {
                    console.log(event);
                    if (event.name === 'LogMessageReceived') {
                        console.log(event);
                        title = event.payload.message.payload.technicalMsg;
                        text = s.sprintf('<div><h4>Trace</h4><pre>%s</pre></div>', event.payload.message.payload.msgParams.trace);
                        return false;
                    }
                });

                if (_.isNull(title)) {
                    title = lastEvent.occurred_on;
                }


                self.tags.whiteboard.showConnectionInfo(source, target, title, text, lastEvent.occurred_on);

                prevTask = task;
            });
        };



        //RiotJs events

        this.on("mount", function () {
            context.app.on("publishWorkflow", _publishWorkflow);
            context.app.on("showProcessLog", _showProcessLog);
            _initWorkflow();

            self.update();

            self.tags["workflow-name"].on("workflowNameWasChanged", function (event) {
                _workflow['name'] = event.new_name;
            });

            self.tags.whiteboard.on("elementWasClicked", _onWhiteboardElementWasClicked);
            self.tags.whiteboard.on("elementWasDropped", _onWhiteboardElementWasDropped);
            self.tags.whiteboard.on("connectorWasMovedOnWhiteboard", _updateFlowchartConfig);
            self.tags.whiteboard.on("connectionWasApplied", _onWhiteboardConnectionWasApplied);
        });

        this.on("unmount", function () {
            context.app.off("publishWorkflow", _publishWorkflow);
        })
    }
</script>