<div class="row">
    <div class="col-md-8 col-lg-offset-2">
        <p class="text-center text-btn-align" if="{ ! isEditingWorkflowName }"><strong>{ workflow_name.value }</strong></p>
        <input name="workflow_name" if="{ isEditingWorkflowName }" type="text" class="form-control" placeholder="<?php echo $this->translate('Enter Workflow Name')?>" onchange="{ onWorkflowNameChanged }" >
        <p></p>
    </div>
    <div class="col-md-2">
        <button class="btn btn-default" onclick="{ editWorkflowName }" if="{ ! isEditingWorkflowName }"><?php echo $this->translate('change')?></button>
        <button class="btn btn-default" onclick="{ saveWorkflowName }" if="{ isEditingWorkflowName }"><?php echo $this->translate('save')?></button>
    </div>
</div>
<div class="row">
    <div id="whiteboard" class="col-md-12">
        <div id="whiteboard-start-point" class="start-point">
            <svg height="60" width="60">
                <circle cx="15" cy="15" r="12"/>
            </svg>
        </div>
    </div>
</div>
<img src="<?php echo $this->basePath() ?>/img/paper_blue.jpg" class="hidden">
<script type="text/javascript">
    function (context) {
        var self = this,
            isEditingWorkflowName = false;

        this.whiteboard = null;
        this.workflow = {};

        var _createElement = function (name, id, uiMetadata, icon, iconType) {
            $elem = $("<div></div>").addClass("element").data("id", id);

            if (iconType === "glyphicon") {
                $elem.append($("<span></span>").addClass("element-icon, glyphicon").addClass(icon));
            }

            $elem.append($("<p></p>").addClass("element-label").html(name));

            return $elem;
        }

        this.initWorkflow = function () {
            if (context.isNew) {
                this.isEditingWorkflowName = true;

                $.postJSON('<?php echo $this->url('prooph.link/process_config/api/workflow')  ?>', {
                    "workflow" : {"name" : "Undefined"}
                }).then(
                    function(data, textStatus, request) {
                        self.workflow['location'] = request.getResponseHeader('location');
                        console.log(self.workflow);
                        self.reloadWorkflow();
                    },
                    $.failNotify
                );
            } else {
                this.workflow = _.findWhere(context.app.workflows, {id : context.workflowId});
                this.workflow['location'] = '<?php echo $this->url('prooph.link/process_config/api/workflow')  ?>/' + context.workflowId;
                this.workflow_name.value = this.workflow.name;
            }
        }

        this.initWhiteboard = function () {
            jsPlumb.ready(function () {
                self.whiteboard = jsPlumb.getInstance({
                    Container : "whiteboard",
                    Connector : "Bezier",
                    ConnectionOverlays  : [
                        [ "PlainArrow", { width:10, length:10, location:1} ]
                    ]
                });

                self.whiteboard.makeSource("whiteboard-start-point", {
                    maxConnections: 1,
                    endpoint:["Dot", { radius : 5, cssClass : "source-point", hoverClass : "source-point-hover"}],
                    anchor : "Right"
                });

                self.whiteboard.bind("connection", _.bind(self.applyConnection, self));

                self.trigger("whiteboardIsReady")
            });

            $("#whiteboard").droppable({
                accept: ":not(.connector)",
                hoverClass : "drop-whiteboard",
                drop : function (event, ui) {
                    var offset = $(this).offset(),
                        x = event.pageX - offset.left -30,
                        y = event.pageY - offset.top - 30,
                        elem = ui.draggable;

                    switch (elem.data("element-type")) {
                        case "connector":
                            self.addConnector(x, y, elem.text(), elem.data("id"),
                                elem.data("ui-metadata-riot-tag"), elem.data("icon"), elem.data("icon-type"));
                            break;
                        default:
                            throw "Unknown element type dropped. Got " + elem.data("element-type");
                    }

                }
            });
        }

        this.reloadWorkflow = function () {
            $.getJSON(this.workflow.location).then(
                function(data) {
                    var workflowData = data.workflow;
                    workflowData['location'] = self.workflow.location;
                    self.workflow = workflowData;
                    self.trigger("workflowWasReloaded");
                },
                $.failNotify
            );
        }

        this.editWorkflowName = function () {
            this.isEditingWorkflowName = true;
        }

        this.saveWorkflowName = function () {
            if (_.isEmpty(this.workflow_name.value)) return;

            this.isEditingWorkflowName = false;

            $.putJSON(this.workflow.location, {workflow : {name : this.workflow_name.value}}).then(
                function () {
                    self.workflow['name'] = self.workflow_name.value;
                },
                $.failNotify
            );
        }

        this.onWorkflowNameChanged = function () {
            if (_.isEmpty(this.workflow_name.value)) {
                this.isEditingWorkflowName = true;
            } else {
                this.saveWorkflowName();
            }
        }

        this.addConnector = function (xPos, yPos, name, id, uiMetadata, icon, iconType) {

            $con = _createElement(name, id, uiMetadata, icon, iconType);

            $con.addClass("connector").css('left', xPos).css('top', yPos);

            $("#whiteboard").append($con);

            this.whiteboard.draggable($con, {
                containment:"parent"
            });

            this.whiteboard.addEndpoint($con.attr("id"), {
                isSource:true,
                endpoint:["Dot", { radius : 5, cssClass : "source-point", hoverClass : "source-point-hover"}],
                anchor : "Bottom",
                maxConnections: 150
            });

            this.whiteboard.addEndpoint($con.attr("id"), {
                isSource:true,
                endpoint:["Dot", { radius : 5, cssClass : "source-point", hoverClass : "source-point-hover"}],
                anchor : "Right",
                maxConnections: 150
            });

            this.whiteboard.addEndpoint($con.attr("id"), {
                isTarget:true,
                endpoint:["Dot", { radius : 5, cssClass : "target-point", hoverClass : "target-point-hover"}],
                anchor : "Top",
                maxConnections : 1
            });

            this.whiteboard.addEndpoint($con.attr("id"), {
                isTarget:true,
                endpoint:["Dot", { radius : 5, cssClass : "target-point", hoverClass : "target-point-hover"}],
                anchor : "Left",
                maxConnections : 1
            });
        }

        this.applyConnection = function(jsPlumbInfo) {
            console.log("apply connection ", jsPlumbInfo);
        }

        this.on("mount", function () {
            this.initWorkflow();
            this.initWhiteboard();
            this.update();
        });
    }
</script>